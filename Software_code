# INTERFACING TEMPERATURE SENSOR WITH RASPBERRY PI
import time
from w1thermsensor import W1ThermSensor
sensor = W1ThermSensor()

while True:
    temperature = sensor.get_temperature()
    print("The temperature is %s celsius" % temperature)
time.sleep(1)

# INTERFACING FLOW RATE SENSOR WITH RASPBERRY PI
codeimportRPi.GPIO as GPIO
import time, sys
GPIO.setmode(GPIO.BOARD)
inpt = 11
GPIO.setup(inpt,GPIO.IN)
rate_cnt = 0
tot_cnt = 0
minutes = 0
constant = 0.10
time_new = 0.0

print('Air Flow - Approximate')
print('Control c to exit')

while True:
time_new = time.time() + 60
rate_cnt = 0
while time.time() <= time_new:
if GPIO.input(inpt)!= 0:
rate_cnt += 1
tot_cnt += 1
try:
print(GPIO.input(inpt), end='')
except KeyboardInterrupt:
print('\nCTRL C - Exiting nicely')
GPIO.cleanup()
sys.exit()
minutes += 1
print('\n / min',round(rate_cnt * constant,4))
print('Total air', round(tot_cnt * constant,4))
print('Time (min & clock) ', minutes, '\t', time.asctime(time.localtime()))

GPIO.cleanup()

# INTERFACING LCD DISPLAY WITH RASPBERRY PI
ImportRPi.GPIO asGPIO
fromtimeimportsleep
	
# Define GPIO to LCD mapping
LCD_RS=7
LCD_E=8
LCD_D4=25
LCD_D5=24
LCD_D6=23
LCD_D7=18
	
# Define some device constants
LCD_WIDTH=16# Maximum characters per line
LCD_CHR=True
LCD_CMD=False
LCD_LINE_1=0x80# LCD RAM address for the 1st line
LCD_LINE_2=0xC0# LCD RAM address for the 2nd line
	
# Timing constants
E_PULSE=0.0005
E_DELAY=0.0005
	
defmain():
	# Main program block
	GPIO.setwarnings(False)
	GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers
	GPIO.setup(LCD_E, GPIO.OUT)  # E
	GPIO.setup(LCD_RS, GPIO.OUT) # RS
	GPIO.setup(LCD_D4, GPIO.OUT) # DB4
	GPIO.setup(LCD_D5, GPIO.OUT) # DB5
	GPIO.setup(LCD_D6, GPIO.OUT) # DB6
	GPIO.setup(LCD_D7, GPIO.OUT) # DB7
	
	# Initialise display
lcd_init()
whileTrue:
	# Send some test
	lcd_string("Electronics Hub ",LCD_LINE_1)
	lcd_string("    Presents    ",LCD_LINE_2)
	
	sleep(3) # 3 second delay
	
# Send some text
lcd_string("Rasbperry Pi",LCD_LINE_1)
lcd_string("16x2 LCD Test",LCD_LINE_2)
sleep(3) # 3 second delay
	
# Send some text
lcd_string("1234567890*@$#%&",LCD_LINE_1)
lcd_string("abcdefghijklmnop",LCD_LINE_2)
sleep(3)
	
deflcd_init():
	lcd_display(0x28,LCD_CMD) # Selecting 4 - bit mode with two rows
	lcd_display(0x0C,LCD_CMD) # Display On,Cursor Off, Blink Off
	lcd_display(0x01,LCD_CMD) # Clear display
	sleep(E_DELAY)
	
deflcd_display(bits, mode):
	# Send byte to data pins
	# bits = data
	# mode = True  for character
# False for command
GPIO.output(LCD_RS, mode) # RS
# High bits
GPIO.output(LCD_D4, False)
GPIO.output(LCD_D5, False)
GPIO.output(LCD_D6, False)
GPIO.output(LCD_D7, False)
ifbits&0x10==0x10:
GPIO.output(LCD_D4, True)
ifbits&0x20==0x20:
GPIO.output(LCD_D5, True)
ifbits&0x40==0x40:
GPIO.output(LCD_D6, True)
ifbits&0x80==0x80:
GPIO.output(LCD_D7, True)
	
# Toggle 'Enable' pin
lcd_toggle_enable()
	
# Low bits
GPIO.output(LCD_D4, False)
GPIO.output(LCD_D5, False)
GPIO.output(LCD_D6, False)
GPIO.output(LCD_D7, False)
ifbits&0x01==0x01:
GPIO.output(LCD_D4, True)
ifbits&0x02==0x02:
GPIO.output(LCD_D5, True)
ifbits&0x04==0x04:
GPIO.output(LCD_D6, True)
ifbits&0x08==0x08:
GPIO.output(LCD_D7, True)
	
# Toggle 'Enable' pin
lcd_toggle_enable()
	
deflcd_toggle_enable():
	# Toggle enable
	time.sleep(E_DELAY)
	GPIO.output(LCD_E, True)
	time.sleep(E_PULSE)
	GPIO.output(LCD_E, False)
	time.sleep(E_DELAY)
	
deflcd_string(message,line):
	# Send string to display
	message=message.ljust(LCD_WIDTH," ")
	lcd_display(line, LCD_CMD)
	foriinrange(LCD_WIDTH):
	lcd_display(ord(message[i]),LCD_CHR)
 
if__name__=='__main__':
	try:
	main()
	exceptKeyboardInterrupt:
	pass
	finally:
	lcd_display(0x01, LCD_CMD)
	GPIO.cleanup()

***********************************************************************************************************************************

















